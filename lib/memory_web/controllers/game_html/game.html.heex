<style>
  .disabled {
    pointer-events: none;
    background-color: lightgray;
  }

  .disabled > * {
    display: none;
  }

  .clickable {
    cursor: pointer;
    background-color: pink;
  }

  .clickable > * {
    display: none;
  }

  .active {
    pointer-events: none;
  }

  .done {
    pointer-events: none;
    background-color: lightgreen;
  }
</style>

<header class="text-white py-4 px-8 flex items-center justify-between">
  <h1 class="text-2xl font-bold">memory_leak</h1>
  <nav>
    <.link navigate={~p"/"} class="text-gray-300 hover:text-white px-4">
      home
    </.link>
    <.link navigate={~p"/game"} class="text-white px-4 font-bold">
      game
    </.link>
    <.link navigate={~p"/highscore"} class="text-gray-300 hover:text-white px-4">
      highscore
    </.link>
  </nav>
</header>

<section class="m-4 flex flex-col gap-8">
  <div class="flex flex-wrap gap-4 items-center justify-evenly">
    <h1 class="text-4xl order-2 lg:order-none">timer: <span id="timer">0</span>s</h1>

    <div class="flex flex-wrap gap-2 w-full lg:w-max min-w-0 items-center justify-center">
        <input
          id="displayName"
          type="text"
          placeholder="Your display name"
          class="border rounded-lg py-4 px-8 text-black text-2xl min-w-0"
        />
        <button
          id="startBtn"
          disabled
          class="py-4 px-8 disabled:bg-gray-400 bg-violet-500 hover:bg-violet-700 text-white font-bold text-2xl rounded-lg w-max"
          onclick="start(event)"
        >
          start game
        </button>
    </div>

    <h1 class="text-4xl order-3">tries: <span id="clicks">0</span></h1>

    <h1 id="score" class="text-5xl order-4 w-full text-center hidden">score: <span id="scoreValue">0</span></h1>
  </div>

  <ul class="flex flex-wrap gap-4 justify-center justify-items-center h-full w-full">
    <li
      :for={card <- @cards}
      data-id={card.id}
      data-language={card.language}
      data-type={card.type}
      class="card disabled w-full md:w-80 h-56 flex justify-center items-center"
      onclick="handleCardClick(event)"
    >
      <%= if card.type == :logo do %>
        <img src={"/images/#{card.language}.png"} class="w-3/4 h-3/4 object-contain" />
      <% else %>
        <img src={"/images/#{card.language}-code.png"} class="w-full h-full object-contain" />
      <% end %>
    </li>
  </ul>
</section>

<script>
  let seconds = 0;
  let clicks = 0;
  let firstCard = null;
  let correctCards = 0;
  let done = 0;
  let started = false;
  let timer = null;

  const startBtn = document.getElementById('startBtn');
  const displayNameInput = document.getElementById('displayName');

  displayNameInput.addEventListener('input', () => {
    if (displayNameInput.value.length >= 3) {
      startBtn.removeAttribute('disabled');
    } else {
      startBtn.setAttribute('disabled', true);
    }
  });

  function start() {

    document.querySelectorAll('.card')
    .forEach(card => {
      card.classList.remove('disabled');
      card.classList.remove('active');
      card.classList.remove('done');
      card.classList.add('clickable');
    })

    if(started) {
      location.reload();
    } else {
      startBtn.innerText = "Reset"
      started = true;
    }

    timer = setInterval(updateTimer, 1000);
  }

    function updateTimer() {
      document.getElementById('timer').innerText = ++seconds;
    }


    function incrementClicks() {
      document.getElementById('clicks').innerText = ++clicks;
    }

    async function endGame () {
     clearInterval(timer);
     displayScore();
     window.scrollTo({ top: 0, behavior: 'smooth' });
     await sleep(1500);

     name = displayNameInput.value;

      await fetch("/game", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': window.csrfToken
        },
        body: JSON.stringify({name , clicks, time: seconds}),
      })

      window.location = "/highscore?name="+name;
    }

    function activate(card) {
      card.classList.remove('clickable');
      card.classList.add('active');
    }

    async function deactivate(cards, isPair) {

      if(!isPair) {
        await sleep(750);
      }

      cards.forEach(card => {
        card.classList.remove('active');
        card.classList.add(isPair ? 'done' : 'clickable');
      })

     if(isPair){
      done += 2;

      if(done === 16) {
        endGame();
      }
     }
    }

    function handleCardClick(event) {

      if(!started) {
        return;
      }

      const card = event.target;
      const cardId = card.getAttribute('data-id');
      const cardLanguage = card.getAttribute('data-language');
      const cardType = card.getAttribute('data-type');

      activate(card);

      if (firstCard === null) {
        firstCard = { element: card, id: cardId, language: cardLanguage, type: cardType  };
        return;
      }

      if (firstCard) {
        incrementClicks()

        activate(card)

        if(firstCard.language === cardLanguage && firstCard.type !== cardType) {
          deactivate([card, firstCard.element], true)
        } else {
          deactivate([card, firstCard.element], false)
        }
        firstCard = null;
      }
    }

    function displayScore() {
      document.getElementById('scoreValue').innerText = Math.round(10000 / (seconds * 1.5 + clicks * 1.25));
      document.getElementById('score').classList.remove('hidden');
    }

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
</script>
